Zilog eZ80 Macro Assembler Version 4.3 (19073001)10-Dec-24     14:39:52     page:   1


PC     Object              I  Line    Source 
                           A     1    .org %0
                           A     2    
                           A     3    ;Load the address $9020 into the IX register - 
000000 DD212090            A     4    LD IX, 9020h
                           A     5    
                           A     6    ;load 0's into memory to better show in demo th
000004 DD360000            A     7    LD (IX+0), 0h
000008 DD360100            A     8    LD (IX+1), 0h
00000C DD360200            A     9    LD (IX+2), 0h
000010 DD360300            A    10    LD (IX+3), 0h
000014 DD360400            A    11    LD (IX+4), 0h
000018 DD360500            A    12    LD (IX+5), 0h
00001C DD360600            A    13    LD (IX+6), 0h
000020 DD360700            A    14    LD (IX+7), 0h
000024 DD360800            A    15    LD (IX+8), 0h
000028 DD360900            A    16    LD (IX+9), 0h
00002C DD360A00            A    17    LD (IX+10), 0h
000030 DD360B00            A    18    LD (IX+11), 0h
000034 DD360C00            A    19    LD (IX+12), 0h
000038 DD360D00            A    20    LD (IX+13), 0h
                           A    21    
                           A    22    
                           A    23    ;Store 0x53 at $9020 and increment IX - will be
00003C DD360053            A    24    LD (IX+0), 53h
000040 DD23                A    25    INC IX
                           A    26    
                           A    27    ;Add 0x15 to 0x30 and store at $9021
                           A    28    ;The A reg is the default accumulator register 
000042 3E15                A    29    LD A, 15h
000044 C630                A    30    ADD A, 30h
000046 DD7700              A    31    LD (IX+0), A
000049 DD23                A    32    INC IX
                           A    33    
                           A    34    ;Subtract 0x9 from 0x50 and store at $9022
00004B                     A    35    get47h:
00004B 3E50                A    36    LD A, 50h
00004D D609                A    37    SUB 9h
00004F DD7700              A    38    LD (IX+0), A
000052 DD23                A    39    INC IX
                           A    40    
                           A    41    ;load the value at $902A and check if that valu
000054 212A90              A    42    LD HL, 902Ah
000057 56                  A    43    LD D, (HL)
000058 BA                  A    44    CP D
000059 CA 9C 00            A    45    JP Z, get47hReturn
                           A    46    
                           A    47    
                           A    48    
                           A    49    ;OR 0x40 with 0x01 and store at $9023
00005C 3E40                A    50    LD A, 40h
00005E F601                A    51    OR 1h
000060 DD7700              A    52    LD (IX+0), A
000063 DD23                A    53    INC IX
                           A    54    
                           A    55    ;exhange the AF and AF' registers to store 0x41
000065 08                  A    56    EX AF, AF'
                           A    57    
                           A    58    ;AND 0xEC with 0x20 and store at $9024
000066 3EEC                A    59    LD A, ECh
000068 E620                A    60    AND 20h
00006A DD7700              A    61    LD (IX+0), A
00006D DD23                A    62    INC IX
                           A    63    
                           A    64    ;XOR 0x41 with 0x6 and store at $9025 - retriev
00006F 08                  A    65    EX AF, AF'
000070 EE06                A    66    XOR 6h
000072 DD7700              A    67    LD (IX+0), A
000075 DD23                A    68    INC IX
                           A    69    
                           A    70    ;Perform logical right shit on 0xC3 and store a
000077 0EC3                A    71    LD C, C3h
000079 CB39                A    72    SRL C
00007B DD7100              A    73    LD (IX+0), C
00007E DD23                A    74    INC IX
                           A    75    
                           A    76    ;Perform rotate left on 0x36 and store at $9027
000080 0E36                A    77    LD C, 36h
000082 CB11                A    78    RL C
000084 DD7100              A    79    LD (IX+0), C
000087 DD23                A    80    INC IX
                           A    81    
                           A    82    ;Call get65h function and get the returned valu
000089 CD BF 00            A    83    CALL get65h
00008C D1                  A    84    POP DE
00008D DD7300              A    85    LD (IX+0), E
000090 DD23                A    86    INC IX
                           A    87    
                           A    88    ;Set bit 5 in register B and store value in B a
000092 CBE8                A    89    SET 5, B
000094 DD7000              A    90    LD (IX+0), B
000097 DD23                A    91    INC IX
                           A    92    
                           A    93    ;Jump to get47h function in the middle of the c
000099 C3 4B 00            A    94    JP get47h
00009C                     A    95    get47hReturn:
                           A    96    
                           A    97    ;Retrieve the value 0x65 from $9028 in memory a
00009C 2690                A    98    LD H, 90h
00009E 2E28                A    99    LD L, 28h
0000A0 56                  A   100    LD D, (HL)
0000A1 DD7200              A   101    LD (IX+0), D
                           A   102    
                           A   103    ;Get value from imput instruction - will be FF 
0000A4 0E07                A   104    LD C, 7h
0000A6 ED50                A   105    IN D, (C)
                           A   106    
                           A   107    ;Reset the appropriate bits in D to change FF t
0000A8 CBBA                A   108    RES 7, D
0000AA CBA2                A   109    RES 4, D
0000AC CB9A                A   110    RES 3, D
0000AE CB92                A   111    RES 2, D
0000B0 CB8A                A   112    RES 1, D
0000B2 DD7201              A   113    LD  (IX+1), D
                           A   114    
                           A   115    ;Perform arithmetic left shift on 0xD9 and stor
0000B5 0EB9                A   116    LD C, B9h
0000B7 CB21                A   117    SLA C
0000B9 DD7102              A   118    LD (IX+2), C
                           A   119    
0000BC                     A   120    end:
                           A   121    
0000BC C3 BC 00            A   122    JP end
                           A   123    
0000BF                     A   124    get65h:
                           A   125    	;store value in sp
0000BF E1                  A   126    	POP HL
                           A   127    	;store 65h in C and push onto stack
0000C0 0E65                A   128    	LD C, 65h
0000C2 C5                  A   129    	PUSH BC
                           A   130    	;push the original sp onto the stack
0000C3 E5                  A   131    	PUSH HL
0000C4 C9                  A   132    	RET


Errors: 0
Warnings: 0
Lines Assembled: 133

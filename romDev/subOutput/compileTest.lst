                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module compileTest
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___SMS__SDSC_signature
                                     12 	.globl ___SMS__SDSC_descr
                                     13 	.globl ___SMS__SDSC_name
                                     14 	.globl ___SMS__SDSC_author
                                     15 	.globl ___SMS__SEGA_signature
                                     16 	.globl _main
                                     17 	.globl _SMS_getKeysReleased
                                     18 	.globl _SMS_getKeysStatus
                                     19 	.globl _GG_loadSpritePalette
                                     20 	.globl _GG_loadBGPalette
                                     21 	.globl _SMS_copySpritestoSAT
                                     22 	.globl _SMS_addSprite_f
                                     23 	.globl _SMS_initSprites
                                     24 	.globl _SMS_loadSTMcompressedTileMapatAddr
                                     25 	.globl _SMS_loadPSGaidencompressedTilesatAddr
                                     26 	.globl _SMS_waitForVBlank
                                     27 	.globl _SMS_setSpriteMode
                                     28 	.globl _SMS_VDPturnOnFeature
                                     29 	.globl _release
                                     30 	.globl _logo
                                     31 	.globl _BallY
                                     32 	.globl _BallX
                                     33 	.globl _SMS_SRAM
                                     34 	.globl _SRAM_bank_to_be_mapped_on_slot2
                                     35 	.globl _ROM_bank_to_be_mapped_on_slot0
                                     36 	.globl _ROM_bank_to_be_mapped_on_slot1
                                     37 	.globl _ROM_bank_to_be_mapped_on_slot2
                                     38 	.globl _initGame
                                     39 	.globl _loadAssets
                                     40 	.globl _moveBall
                                     41 	.globl _drawBall
                                     42 ;--------------------------------------------------------
                                     43 ; special function registers
                                     44 ;--------------------------------------------------------
                           0000BF    45 _SMS_VDPControlPort	=	0x00bf
                                     46 ;--------------------------------------------------------
                                     47 ; ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area _DATA
                           00FFFF    50 _ROM_bank_to_be_mapped_on_slot2	=	0xffff
                           00FFFE    51 _ROM_bank_to_be_mapped_on_slot1	=	0xfffe
                           00FFFD    52 _ROM_bank_to_be_mapped_on_slot0	=	0xfffd
                           00FFFC    53 _SRAM_bank_to_be_mapped_on_slot2	=	0xfffc
                           008000    54 _SMS_SRAM	=	0x8000
      000000                         55 _BallX::
      000000                         56 	.ds 1
      000001                         57 _BallY::
      000001                         58 	.ds 1
      000002                         59 _logo::
      000002                         60 	.ds 1
      000003                         61 _release::
      000003                         62 	.ds 1
                                     63 ;--------------------------------------------------------
                                     64 ; ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area _INITIALIZED
                                     67 ;--------------------------------------------------------
                                     68 ; absolute external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area _DABS (ABS)
                                     71 ;--------------------------------------------------------
                                     72 ; global & static initialisations
                                     73 ;--------------------------------------------------------
                                     74 	.area _HOME
                                     75 	.area _GSINIT
                                     76 	.area _GSFINAL
                                     77 	.area _GSINIT
                                     78 ;--------------------------------------------------------
                                     79 ; Home
                                     80 ;--------------------------------------------------------
                                     81 	.area _HOME
                                     82 	.area _HOME
                                     83 ;--------------------------------------------------------
                                     84 ; code
                                     85 ;--------------------------------------------------------
                                     86 	.area _CODE
                                     87 ;compileTest.c:13: void main(void) {
                                     88 ;	---------------------------------
                                     89 ; Function main
                                     90 ; ---------------------------------
      000000                         91 _main::
                                     92 ;compileTest.c:14: SMS_setSpriteMode(SPRITEMODE_NORMAL);
      000000 2E 00            [ 7]   93 	ld	l, #0x00
                                     94 ;	spillPairReg hl
                                     95 ;	spillPairReg hl
      000002 CDr00r00         [17]   96 	call	_SMS_setSpriteMode
                                     97 ;compileTest.c:15: loadAssets();
      000005 CDr80r00         [17]   98 	call	_loadAssets
                                     99 ;compileTest.c:16: initGame();
      000008 CDr24r00         [17]  100 	call	_initGame
                                    101 ;compileTest.c:17: SMS_displayOn();
      00000B 21 40 01         [10]  102 	ld	hl, #0x0140
      00000E CDr00r00         [17]  103 	call	_SMS_VDPturnOnFeature
      000011                        104 00102$:
                                    105 ;compileTest.c:19: moveBall();
      000011 CDrA8r00         [17]  106 	call	_moveBall
                                    107 ;compileTest.c:20: SMS_initSprites();
      000014 CDr00r00         [17]  108 	call	_SMS_initSprites
                                    109 ;compileTest.c:21: drawBall();
      000017 CDr77r01         [17]  110 	call	_drawBall
                                    111 ;compileTest.c:22: SMS_waitForVBlank();
      00001A CDr00r00         [17]  112 	call	_SMS_waitForVBlank
                                    113 ;compileTest.c:23: SMS_copySpritestoSAT();
      00001D CDr00r00         [17]  114 	call	_SMS_copySpritestoSAT
      000020 C3r11r00         [10]  115 	jp	00102$
      000023                        116 00104$:
                                    117 ;compileTest.c:26: }
      000023 C9               [10]  118 	ret
                                    119 ;compileTest.c:31: void initGame (void) {
                                    120 ;	---------------------------------
                                    121 ; Function initGame
                                    122 ; ---------------------------------
      000024                        123 _initGame::
                                    124 ;compileTest.c:32: BallX=50;
      000024 FD 21r00r00      [14]  125 	ld	iy, #_BallX
      000028 FD 36 00 32      [19]  126 	ld	0 (iy), #0x32
                                    127 ;compileTest.c:33: BallY=96;
      00002C FD 21r01r00      [14]  128 	ld	iy, #_BallY
      000030 FD 36 00 60      [19]  129 	ld	0 (iy), #0x60
                                    130 ;compileTest.c:34: logo = 0;
      000034 FD 21r02r00      [14]  131 	ld	iy, #_logo
      000038 FD 36 00 00      [19]  132 	ld	0 (iy), #0x00
                                    133 ;compileTest.c:35: release = 0;
      00003C FD 21r03r00      [14]  134 	ld	iy, #_release
      000040 FD 36 00 00      [19]  135 	ld	0 (iy), #0x00
      000044                        136 00101$:
                                    137 ;compileTest.c:36: }
      000044 C9               [10]  138 	ret
      000045                        139 __str_0:
      000045 42 72 61 6E 64 6F 6E   140 	.ascii "Brandon Barker"
             20 42 61 72 6B 65 72
      000053 00                     141 	.db 0x00
      000054                        142 __str_1:
      000054 44 65 6D 6F 20 53 63   143 	.ascii "Demo Screen"
             72 65 65 6E
      00005F 00                     144 	.db 0x00
      000060                        145 __str_2:
      000060 53 68 6F 75 6C 64 20   146 	.ascii "Should display something simple"
             64 69 73 70 6C 61 79
             20 73 6F 6D 65 74 68
             69 6E 67 20 73 69 6D
             70 6C 65
      00007F 00                     147 	.db 0x00
                                    148 ;compileTest.c:38: void loadAssets(void) {
                                    149 ;	---------------------------------
                                    150 ; Function loadAssets
                                    151 ; ---------------------------------
      000080                        152 _loadAssets::
                                    153 ;compileTest.c:39: SMS_loadPSGaidencompressedTiles(DemoBG_psgcompr, SPLASH_TILES);
      000080 11 00 40         [10]  154 	ld	de, #0x4000
      000083 21r00r00         [10]  155 	ld	hl, #_DemoBG_psgcompr
      000086 CDr00r00         [17]  156 	call	_SMS_loadPSGaidencompressedTilesatAddr
                                    157 ;compileTest.c:40: SMS_loadSTMcompressedTileMap(0, 0, DemoBG_stmcompr);
      000089 11r00r00         [10]  158 	ld	de, #_DemoBG_stmcompr
      00008C 21 00 78         [10]  159 	ld	hl, #0x7800
      00008F CDr00r00         [17]  160 	call	_SMS_loadSTMcompressedTileMapatAddr
                                    161 ;compileTest.c:41: GG_loadBGPalette(DemoBG_bin);
      000092 21r00r00         [10]  162 	ld	hl, #_DemoBG_bin
      000095 CDr00r00         [17]  163 	call	_GG_loadBGPalette
                                    164 ;compileTest.c:42: SMS_loadPSGaidencompressedTiles(gator_psgcompr, GATOR_TILES);
      000098 11 00 60         [10]  165 	ld	de, #0x6000
      00009B 21r00r00         [10]  166 	ld	hl, #_gator_psgcompr
      00009E CDr00r00         [17]  167 	call	_SMS_loadPSGaidencompressedTilesatAddr
                                    168 ;compileTest.c:44: GG_loadSpritePalette(gator_bin);
      0000A1 21r00r00         [10]  169 	ld	hl, #_gator_bin
      0000A4 C3r00r00         [10]  170 	jp	_GG_loadSpritePalette
      0000A7                        171 00101$:
                                    172 ;compileTest.c:45: }
      0000A7 C9               [10]  173 	ret
                                    174 ;compileTest.c:47: void moveBall (void) {
                                    175 ;	---------------------------------
                                    176 ; Function moveBall
                                    177 ; ---------------------------------
      0000A8                        178 _moveBall::
                                    179 ;compileTest.c:52: unsigned int ks=SMS_getKeysStatus();
      0000A8 CDr00r00         [17]  180 	call	_SMS_getKeysStatus
                                    181 ;compileTest.c:54: BallY-=1;
      0000AB 3Ar01r00         [13]  182 	ld	a, (_BallY+0)
      0000AE 4F               [ 4]  183 	ld	c, a
                                    184 ;compileTest.c:53: if ((ks & PORT_A_KEY_UP) && (BallY>MINBALLY)) {
      0000AF CB 43            [ 8]  185 	bit	0, e
      0000B1 C2rB7r00         [10]  186 	jp	NZ,00209$
      0000B4 C3rCDr00         [10]  187 	jp	00105$
      0000B7                        188 00209$:
      0000B7 3E 18            [ 7]  189 	ld	a, #0x18
      0000B9 FD 21r01r00      [14]  190 	ld	iy, #_BallY
      0000BD FD 96 00         [19]  191 	sub	a, 0 (iy)
      0000C0 D2rCDr00         [10]  192 	jp	NC, 00105$
                                    193 ;compileTest.c:54: BallY-=1;
      0000C3 21r01r00         [10]  194 	ld	hl, #_BallY
      0000C6 79               [ 4]  195 	ld	a, c
      0000C7 C6 FF            [ 7]  196 	add	a, #0xff
      0000C9 77               [ 7]  197 	ld	(hl), a
      0000CA C3rE2r00         [10]  198 	jp	00106$
      0000CD                        199 00105$:
                                    200 ;compileTest.c:55: } else if ((ks & PORT_A_KEY_DOWN) && (BallY<MAXBALLY)) {
      0000CD CB 4B            [ 8]  201 	bit	1, e
      0000CF C2rD5r00         [10]  202 	jp	NZ,00210$
      0000D2 C3rE2r00         [10]  203 	jp	00106$
      0000D5                        204 00210$:
      0000D5 3Ar01r00         [13]  205 	ld	a, (_BallY+0)
      0000D8 D6 88            [ 7]  206 	sub	a, #0x88
      0000DA D2rE2r00         [10]  207 	jp	NC, 00106$
                                    208 ;compileTest.c:56: BallY+=1;
      0000DD 79               [ 4]  209 	ld	a, c
      0000DE 3C               [ 4]  210 	inc	a
      0000DF 32r01r00         [13]  211 	ld	(_BallY+0), a
      0000E2                        212 00106$:
                                    213 ;compileTest.c:59: BallX-=1;
      0000E2 3Ar00r00         [13]  214 	ld	a, (_BallX+0)
      0000E5 4F               [ 4]  215 	ld	c, a
                                    216 ;compileTest.c:58: if ((ks & PORT_A_KEY_LEFT) && (BallX>MINBALLX)) {
      0000E6 CB 53            [ 8]  217 	bit	2, e
      0000E8 C2rEEr00         [10]  218 	jp	NZ,00211$
      0000EB C3r04r01         [10]  219 	jp	00112$
      0000EE                        220 00211$:
      0000EE 3E 32            [ 7]  221 	ld	a, #0x32
      0000F0 FD 21r00r00      [14]  222 	ld	iy, #_BallX
      0000F4 FD 96 00         [19]  223 	sub	a, 0 (iy)
      0000F7 D2r04r01         [10]  224 	jp	NC, 00112$
                                    225 ;compileTest.c:59: BallX-=1;
      0000FA 21r00r00         [10]  226 	ld	hl, #_BallX
      0000FD 79               [ 4]  227 	ld	a, c
      0000FE C6 FF            [ 7]  228 	add	a, #0xff
      000100 77               [ 7]  229 	ld	(hl), a
      000101 C3r19r01         [10]  230 	jp	00113$
      000104                        231 00112$:
                                    232 ;compileTest.c:60: } else if ((ks & PORT_A_KEY_RIGHT) && (BallX<MAXBALLX)) {
      000104 CB 5B            [ 8]  233 	bit	3, e
      000106 C2r0Cr01         [10]  234 	jp	NZ,00212$
      000109 C3r19r01         [10]  235 	jp	00113$
      00010C                        236 00212$:
      00010C 3Ar00r00         [13]  237 	ld	a, (_BallX+0)
      00010F D6 B0            [ 7]  238 	sub	a, #0xb0
      000111 D2r19r01         [10]  239 	jp	NC, 00113$
                                    240 ;compileTest.c:61: BallX+=1;
      000114 79               [ 4]  241 	ld	a, c
      000115 3C               [ 4]  242 	inc	a
      000116 32r00r00         [13]  243 	ld	(_BallX+0), a
      000119                        244 00113$:
                                    245 ;compileTest.c:63: if ((ks & PORT_A_KEY_1) && (release == 0)) {
      000119 CB 63            [ 8]  246 	bit	4, e
      00011B C2r21r01         [10]  247 	jp	NZ,00213$
      00011E C3r63r01         [10]  248 	jp	00119$
      000121                        249 00213$:
      000121 3Ar03r00         [13]  250 	ld	a, (_release+0)
      000124 B7               [ 4]  251 	or	a, a
      000125 C2r63r01         [10]  252 	jp	NZ, 00119$
                                    253 ;compileTest.c:64: if (logo == 0) {
      000128 3Ar02r00         [13]  254 	ld	a, (_logo+0)
      00012B B7               [ 4]  255 	or	a, a
      00012C C2r41r01         [10]  256 	jp	NZ, 00116$
                                    257 ;compileTest.c:65: SMS_loadPSGaidencompressedTiles(Nole_psgcompr, GATOR_TILES);
      00012F 11 00 60         [10]  258 	ld	de, #0x6000
      000132 21r00r00         [10]  259 	ld	hl, #_Nole_psgcompr
      000135 CDr00r00         [17]  260 	call	_SMS_loadPSGaidencompressedTilesatAddr
                                    261 ;compileTest.c:66: GG_loadSpritePalette(Nole_bin);
      000138 21r00r00         [10]  262 	ld	hl, #_Nole_bin
      00013B CDr00r00         [17]  263 	call	_GG_loadSpritePalette
      00013E C3r50r01         [10]  264 	jp	00117$
      000141                        265 00116$:
                                    266 ;compileTest.c:69: SMS_loadPSGaidencompressedTiles(gator_psgcompr, GATOR_TILES);
      000141 11 00 60         [10]  267 	ld	de, #0x6000
      000144 21r00r00         [10]  268 	ld	hl, #_gator_psgcompr
      000147 CDr00r00         [17]  269 	call	_SMS_loadPSGaidencompressedTilesatAddr
                                    270 ;compileTest.c:70: GG_loadSpritePalette(gator_bin);
      00014A 21r00r00         [10]  271 	ld	hl, #_gator_bin
      00014D CDr00r00         [17]  272 	call	_GG_loadSpritePalette
      000150                        273 00117$:
                                    274 ;compileTest.c:72: logo = 1 - logo;
      000150 3Ar02r00         [13]  275 	ld	a, (_logo+0)
      000153 4F               [ 4]  276 	ld	c, a
      000154 21r02r00         [10]  277 	ld	hl, #_logo
      000157 3E 01            [ 7]  278 	ld	a, #0x01
      000159 91               [ 4]  279 	sub	a, c
      00015A 77               [ 7]  280 	ld	(hl), a
                                    281 ;compileTest.c:73: release = 1;
      00015B FD 21r03r00      [14]  282 	ld	iy, #_release
      00015F FD 36 00 01      [19]  283 	ld	0 (iy), #0x01
      000163                        284 00119$:
                                    285 ;compileTest.c:75: ks = SMS_getKeysReleased();
      000163 CDr00r00         [17]  286 	call	_SMS_getKeysReleased
                                    287 ;compileTest.c:76: if (ks & PORT_A_KEY_1) {
      000166 CB 63            [ 8]  288 	bit	4, e
      000168 C2r6Er01         [10]  289 	jp	NZ,00214$
      00016B C3r76r01         [10]  290 	jp	00123$
      00016E                        291 00214$:
                                    292 ;compileTest.c:77: release = 0;
      00016E FD 21r03r00      [14]  293 	ld	iy, #_release
      000172 FD 36 00 00      [19]  294 	ld	0 (iy), #0x00
      000176                        295 00123$:
                                    296 ;compileTest.c:80: }
      000176 C9               [10]  297 	ret
                                    298 ;compileTest.c:82: void drawBall(void) {
                                    299 ;	---------------------------------
                                    300 ; Function drawBall
                                    301 ; ---------------------------------
      000177                        302 _drawBall::
      000177 DD E5            [15]  303 	push	ix
      000179 DD 21 00 00      [14]  304 	ld	ix,#0
      00017D DD 39            [15]  305 	add	ix,sp
      00017F F5               [11]  306 	push	af
      000180 F5               [11]  307 	push	af
                                    308 ;compileTest.c:84: for (y = 0; y < 4; y++) {
      000181 DD 36 FE 00      [19]  309 	ld	-2 (ix), #0x00
                                    310 ;compileTest.c:85: for (x = 0; x < 4; x++) {
      000185                        311 00109$:
      000185 DD 36 FF 00      [19]  312 	ld	-1 (ix), #0x00
      000189                        313 00103$:
                                    314 ;compileTest.c:86: SMS_addSprite(BallX + x * 8, BallY + y * 8, GATOR_TILES + y * 4 + x);
      000189 3Ar00r00         [13]  315 	ld	a, (_BallX+0)
      00018C 4F               [ 4]  316 	ld	c, a
      00018D 06 00            [ 7]  317 	ld	b, #0x00
      00018F DD 7E FF         [19]  318 	ld	a, -1 (ix)
      000192 DD 77 FC         [19]  319 	ld	-4 (ix), a
      000195 DD 36 FD 00      [19]  320 	ld	-3 (ix), #0x00
      000199 E1               [10]  321 	pop	hl
      00019A E5               [11]  322 	push	hl
      00019B 29               [11]  323 	add	hl, hl
      00019C 29               [11]  324 	add	hl, hl
      00019D 29               [11]  325 	add	hl, hl
      00019E 09               [11]  326 	add	hl, bc
      00019F AF               [ 4]  327 	xor	a, a
      0001A0 45               [ 4]  328 	ld	b, l
      0001A1 0E 00            [ 7]  329 	ld	c, #0x00
      0001A3 DD 6E FE         [19]  330 	ld	l, -2 (ix)
                                    331 ;	spillPairReg hl
                                    332 ;	spillPairReg hl
      0001A6 26 00            [ 7]  333 	ld	h, #0x00
                                    334 ;	spillPairReg hl
                                    335 ;	spillPairReg hl
      0001A8 5D               [ 4]  336 	ld	e, l
      0001A9 54               [ 4]  337 	ld	d, h
      0001AA EB               [ 4]  338 	ex	de, hl
      0001AB 29               [11]  339 	add	hl, hl
      0001AC 29               [11]  340 	add	hl, hl
      0001AD EB               [ 4]  341 	ex	de, hl
      0001AE 7A               [ 4]  342 	ld	a, d
      0001AF 3C               [ 4]  343 	inc	a
      0001B0 57               [ 4]  344 	ld	d, a
      0001B1 7B               [ 4]  345 	ld	a, e
      0001B2 DD 86 FC         [19]  346 	add	a, -4 (ix)
      0001B5 5F               [ 4]  347 	ld	e, a
      0001B6 7A               [ 4]  348 	ld	a, d
      0001B7 DD 8E FD         [19]  349 	adc	a, -3 (ix)
      0001BA 57               [ 4]  350 	ld	d, a
      0001BB 16 00            [ 7]  351 	ld	d, #0x00
      0001BD 7B               [ 4]  352 	ld	a, e
      0001BE B1               [ 4]  353 	or	a, c
      0001BF 5F               [ 4]  354 	ld	e, a
      0001C0 7A               [ 4]  355 	ld	a, d
      0001C1 B0               [ 4]  356 	or	a, b
      0001C2 57               [ 4]  357 	ld	d, a
      0001C3 3Ar01r00         [13]  358 	ld	a, (_BallY+0)
      0001C6 4F               [ 4]  359 	ld	c, a
      0001C7 06 00            [ 7]  360 	ld	b, #0x00
      0001C9 29               [11]  361 	add	hl, hl
      0001CA 29               [11]  362 	add	hl, hl
      0001CB 29               [11]  363 	add	hl, hl
      0001CC 09               [11]  364 	add	hl, bc
      0001CD CDr00r00         [17]  365 	call	_SMS_addSprite_f
                                    366 ;compileTest.c:85: for (x = 0; x < 4; x++) {
      0001D0 DD 34 FF         [23]  367 	inc	-1 (ix)
      0001D3 DD 7E FF         [19]  368 	ld	a, -1 (ix)
      0001D6 D6 04            [ 7]  369 	sub	a, #0x04
      0001D8 DAr89r01         [10]  370 	jp	C, 00103$
                                    371 ;compileTest.c:84: for (y = 0; y < 4; y++) {
      0001DB DD 34 FE         [23]  372 	inc	-2 (ix)
      0001DE DD 7E FE         [19]  373 	ld	a, -2 (ix)
      0001E1 D6 04            [ 7]  374 	sub	a, #0x04
      0001E3 DAr85r01         [10]  375 	jp	C, 00109$
      0001E6                        376 00107$:
                                    377 ;compileTest.c:89: }
      0001E6 DD F9            [10]  378 	ld	sp, ix
      0001E8 DD E1            [14]  379 	pop	ix
      0001EA C9               [10]  380 	ret
                                    381 	.area _CODE
                                    382 	.area _INITIALIZER
                                    383 	.area _CABS (ABS)
      007FF0                        384 	.org 0x7FF0
      007FF0                        385 ___SMS__SEGA_signature:
      007FF0 54                     386 	.db #0x54	; 84	'T'
      007FF1 4D                     387 	.db #0x4d	; 77	'M'
      007FF2 52                     388 	.db #0x52	; 82	'R'
      007FF3 20                     389 	.db #0x20	; 32
      007FF4 53                     390 	.db #0x53	; 83	'S'
      007FF5 45                     391 	.db #0x45	; 69	'E'
      007FF6 47                     392 	.db #0x47	; 71	'G'
      007FF7 41                     393 	.db #0x41	; 65	'A'
      007FF8 FF                     394 	.db #0xff	; 255
      007FF9 FF                     395 	.db #0xff	; 255
      007FFA FF                     396 	.db #0xff	; 255
      007FFB FF                     397 	.db #0xff	; 255
      007FFC 99                     398 	.db #0x99	; 153
      007FFD 99                     399 	.db #0x99	; 153
      007FFE 00                     400 	.db #0x00	; 0
      007FFF 7C                     401 	.db #0x7c	; 124
      007FD1                        402 	.org 0x7FD1
      007FD1                        403 ___SMS__SDSC_author:
      007FD1 42 72 61 6E 64 6F 6E   404 	.ascii "Brandon Barker"
             20 42 61 72 6B 65 72
      007FDF 00                     405 	.db 0x00
      007FC5                        406 	.org 0x7FC5
      007FC5                        407 ___SMS__SDSC_name:
      007FC5 44 65 6D 6F 20 53 63   408 	.ascii "Demo Screen"
             72 65 65 6E
      007FD0 00                     409 	.db 0x00
      007FA5                        410 	.org 0x7FA5
      007FA5                        411 ___SMS__SDSC_descr:
      007FA5 53 68 6F 75 6C 64 20   412 	.ascii "Should display something simple"
             64 69 73 70 6C 61 79
             20 73 6F 6D 65 74 68
             69 6E 67 20 73 69 6D
             70 6C 65
      007FC4 00                     413 	.db 0x00
      007FE0                        414 	.org 0x7FE0
      007FE0                        415 ___SMS__SDSC_signature:
      007FE0 53                     416 	.db #0x53	; 83	'S'
      007FE1 44                     417 	.db #0x44	; 68	'D'
      007FE2 53                     418 	.db #0x53	; 83	'S'
      007FE3 43                     419 	.db #0x43	; 67	'C'
      007FE4 01                     420 	.db #0x01	; 1
      007FE5 00                     421 	.db #0x00	; 0
      007FE6 26                     422 	.db #0x26	; 38
      007FE7 11                     423 	.db #0x11	; 17
      007FE8 24                     424 	.db #0x24	; 36
      007FE9 20                     425 	.db #0x20	; 32
      007FEA D1                     426 	.db #0xd1	; 209
      007FEB 7F                     427 	.db #0x7f	; 127
      007FEC C5                     428 	.db #0xc5	; 197
      007FED 7F                     429 	.db #0x7f	; 127
      007FEE A5                     430 	.db #0xa5	; 165
      007FEF 7F                     431 	.db #0x7f	; 127
